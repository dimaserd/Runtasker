<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="AddedSubjectFormat" xml:space="preserve">
    <value>о заказе №{0}.</value>
    <comment>о заказе №{номер заказа}.</comment>
  </data>
  <data name="AddedTextFormat" xml:space="preserve">
    <value>Уважаемый/ая, {0}, вы создали заказ №{1}. Мы его получили, наши администраторы уже проверяют его, мы сообщим вам цену по электронной почте.</value>
    <comment>Уважаемый, {имя пользователя}, вы создали заказ №{0}. Мы его получили, наши администраторы уже проверяют его, мы сообщим вам цену по электронной почте.</comment>
  </data>
  <data name="Dear" xml:space="preserve">
    <value>Уважаемый/ая</value>
  </data>
  <data name="DownloadedBtnText" xml:space="preserve">
    <value>Перейти к моим заказам!</value>
  </data>
  <data name="DownloadedSubjectFormat" xml:space="preserve">
    <value>Вы только что скачали решение заказа {0}.</value>
    <comment>Вы только что скачали решение заказа {номер заказа}.</comment>
  </data>
  <data name="DownloadedTextFormat" xml:space="preserve">
    <value>Уважаемый/ая, {0}, вы скачали решение заказа №{1}. ! Расскажите нам о результате. Мы не торопим вас с этим. Сделайте это тогда, когда вам удобно. Надеемся увидеть вас снова на Runtasker!</value>
    <comment>Уважаемый/ая, {имя пользователя}, вы скачали решение заказа №{номер заказа}. ! Расскажите нам о результате. Мы не торопим вас с этим. Сделайте это тогда, когда вам удобно. Надеемся увидеть вас снова на Runtasker!</comment>
  </data>
  <data name="FirstPaidSubjectFormat" xml:space="preserve">
    <value>Вы оплатили половину заказа №{0}</value>
    <comment>Вы оплатили половину заказа №{номер заказа}</comment>
  </data>
  <data name="FirstPaidTextFormat" xml:space="preserve">
    <value>Уважаемый/ая, {0}, вы оплатили половину заказа №{1}. Наша команда скоро начнет выполнять его! Вы получите решение к {2} или ранее. Мы сообщим вам, как только закончим!</value>
    <comment>Уважаемый, {имя пользователя}, вы оплатили половину заказа №{номер заказа}. Наша команда скоро начнет выполнять его! Вы получите решение к {дата завершения} или ранее. Мы сообщим вам, как только закончим!</comment>
  </data>
  <data name="HelloFormat" xml:space="preserve">
    <value>Здравствуйте, {0}.</value>
    <comment>Здравствуйте, {имя пользователя}.</comment>
  </data>
  <data name="InvFinishedBtnText" xml:space="preserve">
    <value>Потратить мои деньги!</value>
  </data>
  <data name="InvFinishedSubject" xml:space="preserve">
    <value>Вам зачислено 300 рублей!</value>
  </data>
  <data name="InvFinishedText1" xml:space="preserve">
    <value>завершил свой первый заказ!</value>
  </data>
  <data name="InvFinishedText2" xml:space="preserve">
    <value>Вы пригласили его/ее к нам! Это означает, что мы дарим вам 300 рублей! Будем рады видеть вас и ваших друзей на Runtasker!</value>
  </data>
  <data name="RuntaskerWish" xml:space="preserve">
    <value>С наилучшими пожеланиями от Runtasker!</value>
  </data>
  <data name="User" xml:space="preserve">
    <value>Пользователь</value>
  </data>
</root>