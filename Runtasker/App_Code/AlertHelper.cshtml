@helper GetAlert(string title, string text)
{
    <div class="alert alert-info fade in">
        <button type="button" class="close" data-dismiss="alert" aria-hidden="true">×</button>
        <h4>@title</h4>
        <p>@text</p>
        @*<p>
            <button type="button" class="btn btn-danger">Выполнить это действие</button>
            <button type="button" class="btn btn-default">Или сделайте это</button>
        </p>*@
    </div>
}

@helper GetAlertWithActionBtn(string title, string text, string btnHtml = null)
{
    <div class="alert alert-info fade in">
        <button type="button" class="close" data-dismiss="alert" aria-hidden="true">×</button>
        <h4>@title</h4>
        <p>@text</p>
        @if (btnHtml != null)
        {
            <p>
                @Extensions.String.StringExtension.ToHtml(btnHtml)
            </p>
        }
    </div>
}

@helper GetBigAlert()
{
    <div id="bigError" class="alert alert-danger">
        <i class="fa fa-frown-o"></i>
        <strong id="bigErrorText"></strong>
    </div>
}

@helper GetAnonymousNotificationAlert(Runtasker.Logic.Enumerations.Notifications.Anonymous.AnonymousNotificationType? notType, bool shadowFromTop = false)
{
Runtasker.Models.Notifications.UINotificationModel model = Runtasker.Statics.Notifications.UIGuestNotifications.GetUINotification(notType);
if (model != null)
{
    if(shadowFromTop)
    {
        <style>
            .marginFromShadow
            {
                margin-top: 55px;
            }
        </style>
    }
    string _class = $"alert marginFromShadow {Runtasker.Logic.Entities.NotificationEnumExtensions.ToDescriptionString(model.Type)} alert-dismissable";

        <div class="row">
            <div class="col-md-12">
                <div class="@Extensions.String.StringExtension.ToHtml(@_class)">
                    <button type="button" class="close" data-dismiss="alert" aria-hidden="true">&times;</button>
                    <h4>@model.Title</h4>
                    <p>@model.Text</p>
                    @if (model.ActionLink != null)
                    {
                        <p>@Extensions.String.StringExtension.ToHtml(model.ActionLink.ToString())</p>
                    }
                </div>
            </div>
        </div>
        
}
    
}