@helper GetSubjectChangeHandlers()
{
    <script>
        var subjectList = $('#subjectList');
        var otherSubjectForm = $('#OtherSubjectForm');
        var hiddenSubject = $('#hiddenSubject');
        var otherSubject = $('#OtherSubject');

        subjectList.change(function () {
            hiddenSubject.val($(this).val());
            if($(this).val() == (0)) {
                otherSubject.val('');
                otherSubjectForm.show();
                //повторяем цвет класса как в дополнителном предмете
                CheckColorClasses();
            }
            else {
                AddSuccessToForm("#Subject")
                otherSubjectForm.hide();
            }
        });

        otherSubject.change(function (){
            CheckOtherSubject();
        })

        function CheckOtherSubject() {
            ClearClasses("#OtherSubjectForm");
            ClearClasses("#SubjectForm")

            HideError("#OtherSubject");



            if (otherSubject.val().length < 3 && subjectList.val() == 0) {
                AddErrorToForm("#OtherSubject");
                ShowError("#OtherSubject", "Предмет укажи бля!")
                //повторяем цвет класса как в дополнителном предмете
                CheckColorClasses();

                return false;
            }
            else
            {
                AddSuccessToForm("#OtherSubject")
                //повторяем цвет класса как в дополнителном предмете
                CheckColorClasses();
                return true;
            }

        }

        function CheckColorClasses() {
            //повторяем цвет класса как в дополнителном предмете
            if (otherSubjectForm.hasClass("has-success")) {
                AddSuccessToForm("#Subject");
            }
            else if (otherSubjectForm.hasClass("has-error")) {
                AddErrorToForm("#Subject");
            }
        }

    </script>
}

@helper GetValidationColoringAndErrorShowing()
{
    <script>
        //функции которые подсвечивают правильный и неправильный ввод
        function ClearClasses(object) {
            var classNames = ["has-success", "has-error"]
            for (i = 0; i < classNames.length; i++) {
                if ($(object).hasClass(classNames[i])) {
                    $(object).removeClass(classNames[i]);
                }
            }
        }

        function AddErrorToForm(object) {
            var objectForm = object + "Form";
            ClearClasses(objectForm)
            $(objectForm).addClass("has-error");
        }

        function AddSuccessToForm(object) {
            var objectForm = object + "Form";
            ClearClasses(objectForm);
            $(objectForm).addClass("has-success");
        }

        //функции которые показывают и скрывают ошибку при вводе
        function ShowError(object, errorText) {
            var objectError = object + "Error";


            $(objectError).html(errorText);

            $(objectError).show();

        }

        function HideError(object) {
            var objectError = object + "Error";

            $(objectError).hide();
        }
    </script>
}

@helper GetBigErrorScripts()
{
    <script>
        var bigError = $("#bigError");
        var bigErrorText = $("#bigErrorText")

        function ShowBigError(errorDesc) {
            bigErrorText.html(errorDesc);
            bigError.show();
        }

        function HideBigError() {
            bigError.hide();
        }
    </script>
}


@helper GetPreparingScripts()
{
    <script>
        var dataFields = ["#Name", "#Email", "#Description"];

        var defaultsFields = function () {
            for (i = 0; i < dataFields.length; i++) {


                ClearClasses((dataFields[i] + "Form"));
                $(dataFields[i] + "Error").hide();
            }

            $("#NameError").hide();
            $("#EmailError").hide();
            $("#bigError").hide();
        }()
    </script>
}

@helper GetNameAndEmailHandlers(Runtasker.LocaleBuilders.Models.LocaleViewModel localeModel)
{
    @GetEmailHandler(localeModel);
    @GetNameHandler(localeModel);
}

@helper GetEmailHandler(Runtasker.LocaleBuilders.Models.LocaleViewModel localeModel)
{
    <script>
    //обработчик электронной почты
    var Email = "#Email";

        $(Email + "Field").change(function(e) {
        CheckEmailField();
    })

        function CheckEmailField()
            {

                if (isValidEmail($(Email + "Field").val()))
                {

                    AddSuccessToForm(Email);
                $(Email + "Error").hide();
                    return true;
                }
                else
                {

                    AddErrorToForm(Email);
                    ShowError(Email, "@localeModel["EmailError"]");
                    return false;
                }
            }
            //функция проверки эмейла
            function isValidEmail(email)
            {
                var re = /^ (([^<> ()\[\]\\.,;:\s@@"]+(\.[^<>()\[\]\\.,;:\s@@"]+)*)| (".+"))@@((\[[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}])|(([a - zA - Z\-0 - 9]+\.)+[a-zA-Z]{2,}))$/;
            return re.test(email);
        }
    </script>
}

@helper GetNameHandler(Runtasker.LocaleBuilders.Models.LocaleViewModel localeModel)
{
    <script>

        //обработчик имени
        var Name = "#Name";

        $(Name + "Field").change(function (e) {
            CheckNameField();
        })

        function CheckNameField() {

            if ($(Name + "Field").val().length < 3) {
                AddErrorToForm(Name);
                ShowError(Name, "@localeModel["NameError"]");
                return false;
            }
            else {
                AddSuccessToForm(Name);
                HideError(Name);
                return true;
            }
        }
        </script>
}

@helper GetDateAndWorkTypeHandlers()
{
    <script>
        var datetimepicker1 = $("#datetimepicker1");
        var workTypeField = $("#WorkTypeField");

        //обработчики будут одинаковыми
        datetimepicker1.change(function (e) {
            e.preventDefault();
            dateAndWorkTypeCheck();
        });

        workTypeField.change(function (e) {
            e.preventDefault();
            dateAndWorkTypeCheck();
        })

        function dateAndWorkTypeCheck()
        {
            var days = parseInt(daydiff(parseDate(datetimepicker1.val())))
            var workType = parseInt(workTypeField.val());

            ClearClasses("#WorkTypeForm");
            ClearClasses("#DateForm");


            return CheckDaysForWorkType(days, workType)
        }


        function CheckDaysForWorkType(days, workType)
        {
            console.log("days : " + days + " workType : " + workType);

            HideBigError();

                switch (workType) {
                    case 0:
                        if (days < 3) {
                            ShowBigError("@Runtasker.Resources.Views.Orders.Create.Create.FinishDateErrorOrdinary");
                            AddErrorToForm("#WorkType");
                            AddErrorToForm("#Date");
                            return false;
                        }
                        else
                        {
                            AddSuccessToForm("#WorkType");
                            AddSuccessToForm("#Date");
                            return true;
                        }
                        break;
                    case 1:
                        if (days < 7) {

                            ShowBigError("@Runtasker.Resources.Views.Orders.Create.Create.FinishDateErrorEssay");
                            AddErrorToForm("#WorkType");
                            AddErrorToForm("#Date");
                            return false;
                        }
                        else
                        {
                            AddSuccessToForm("#WorkType");
                            AddSuccessToForm("#Date");
                            return true;
                        }
                        break;
                    case 2:
                        if (days < 30)
                        {
                            ShowBigError("@Runtasker.Resources.Views.Orders.Create.Create.FinishDateErrorCourseWork");
                            AddErrorToForm("#WorkType");
                            AddErrorToForm("#Date");
                            return false;
                        }
                        else
                        {
                            AddSuccessToForm("#WorkType");
                            AddSuccessToForm("#Date");
                            return true;
                        }
                        break;
                    default:
                        alert('Я таких значений не знаю');
                }
            }
    </script>
}

@helper GetDescriptionHandlers(Runtasker.LocaleBuilders.Models.LocaleViewModel localeModel)
{
    <script>
        var descriptionForm = $("#DescriptionForm");
        var descriptionField = $("#DescriptionField");
        var descriptionError = $("#DescriptionError");

        descriptionField.change(function (e) {
            CheckDescription();

        })

        function CheckDescription()
        {
            if (descriptionField.val().length < 5) {
                ShowError("#Description", "@localeModel["DescriptionError"]");
                AddErrorToForm("#Description");
                return false;
            }
            else {
                AddSuccessToForm("#Description")
                HideError("#Description");
                return true;
            }
        }

    </script>
}

@helper GetSubjectCheckers(Runtasker.LocaleBuilders.Models.LocaleViewModel localeModel)
{
    <script>
        var subjectList = $('#subjectList');
        var otherSubjectForm = $('#OtherSubjectForm');
        var hiddenSubject = $('#hiddenSubject');
        var otherSubject = $('#OtherSubject');

        subjectList.change(function () {
            hiddenSubject.val($(this).val());
            if ($(this).val() == (0)) {
                otherSubject.val('');
                otherSubjectForm.show();
                //повторяем цвет класса как в дополнителном предмете
                CheckColorClasses();
            }
            else {
                AddSuccessToForm("#Subject")
                otherSubjectForm.hide();
            }
        });

        otherSubject.change(function () {
            CheckOtherSubject();
        })

        function CheckOtherSubject() {
            ClearClasses("#OtherSubjectForm");
            ClearClasses("#SubjectForm")

            HideError("#OtherSubject");



            if (otherSubject.val().length < 3 && subjectList.val() == 0) {
                AddErrorToForm("#OtherSubject");
                ShowError("#OtherSubject", "@localeModel["OtherSubjectError"]")
                //повторяем цвет класса как в дополнителном предмете
                CheckColorClasses();

                return false;
            }
            else {
                AddSuccessToForm("#OtherSubject")
                //повторяем цвет класса как в дополнителном предмете
                CheckColorClasses();
                return true;
            }

        }

        function CheckColorClasses() {
            //повторяем цвет класса как в дополнителном предмете
            if (otherSubjectForm.hasClass("has-success")) {
                AddSuccessToForm("#Subject");
            }
            else if (otherSubjectForm.hasClass("has-error")) {
                AddErrorToForm("#Subject");
            }
        }

    </script>
}

@helper GetDefaultSubjectScripts()
{
    <script>
        var defaultsSubject = function () {

            $("#subjectList").get(0).selectedIndex = 0;

            $("#OtherSubjectForm").hide();
        }();
    </script>
}