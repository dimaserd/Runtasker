
@using Runtasker.HtmlExtensions
@using HtmlExtensions.StaticRenderers
@using Extensions.String
@using Runtasker.LocaleBuilders.Models
@using Common.JavascriptValidation.Statics
@using Runtasker.Logic.Models.Orders
@model AnonymousKnowThePrice
@using Runtasker.HtmlExtensions
@using Runtasker.LocaleBuilders.Models
@using HtmlExtensions.StaticRenderers
@using Extensions.String
@{ 
    //получаем списки для выпадающих меню
    List<SelectListItem> subjectsList = StaticHtmlClassesHelper.GetSortedSubjectEnumList().ToList();
    List<SelectListItem> workTypesList = StaticHtmlClassesHelper.GetWorkTypeEnumList().ToList();


    string langCode = StaticHtmlClassesHelper.GetLangCode();

    LocaleViewModel localeModel = ViewData["localeModel"] as LocaleViewModel;


    ViewBag.Title = localeModel["ActionDescMini"];

    string jsObject = JSValidationMaker.GetJSValidationObject(typeof(AnonymousKnowThePrice));
}
  


<!-- WRAPPER -->
<div>

    <!-- PAGE TITLE -->
    <header id="page-title">
        <div class="container">
            <h1>@localeModel["ActionDescMini"]</h1>
            <ul class="breadcrumb">
                <li><a href="@Url.Action("Index","Home")">@localeModel["HomeNav"]</a></li>
                <li class="active">@localeModel["ActiveNav"]</li>
            </ul>
        </div>
    </header>

    <div>

        <h2>@localeModel["ActionDescHtml"].ToHtml()</h2>

        @using (Html.BeginForm("KnowPrice", "Home", FormMethod.Post, htmlAttributes: new { id = "contactForm", @class = "form-horizontal", enctype = "multipart/form-data" }))
        {
            
            @Html.ValidationErrorsToAlerts()

            @Html.LabelAndTextBoxFor(x => x.Name, showPopover: true)

            @Html.LabelAndTextBoxFor(x => x.Email, showPopover: true)

            @Html.LabelAndDropDownListFor(x => x.WorkType, selectList: workTypesList, showPopover: true)

            @Html.LabelAndDropDownListFor(x => x.Subject, selectList: subjectsList, showPopover: true)

            @Html.LabelAndTextBoxFor(x => x.OtherSubject, showPopover: true)

            @Html.LabelAndDateTimePickerFor(x => x.CompletionDate, showPopover: true)

            <!--FilesUpload-->
            <div id="@PropertyNameHelper.GetIdForForm("Files")" class="form-group">
                @Html.LabelFor(model => model.Files, htmlAttributes: new { @class = "control-label col-md-2 col-sm-2" })
                <div class="col-md-10 col-sm-10">
                    <p>
                        <div class='input-group'>
                            @Html.TextBoxFor(model => model.Files, htmlAttributes: new { id = PropertyNameHelper.GetIdForInput("FileUpload"), type = "file", multiple = "" })
                            <div class='input-group-btn'>
                                <div class="pull-right">
                                    @Html.PopoverInfoFor(model => model.Files, htmlAttributes: new { @class = "circle" })
                                    <style>
                                        .circle {
                                            border: solid 1px #000;
                                            border-radius: 45%;
                                        }
                                    </style>
                                </div>
                            </div>
                        </div>
                    </p>
                    <p>@Html.GetStrongErrorText(x => x.Files)</p>
                </div>
            </div>
            <!--/FilesUpload-->

            @Html.LabelAndTextAreaFor(x => x.Description)

            <input id="realSubmit" class="hidden" type="submit" />


            <div class="row">
                <div class="col-md-12">
                    <span class="pull-right">
                        <!-- captcha -->
                    </span>
                    <div id="fakeSendBtn" class="btn btn-info">
                        @GISigns.PlusSign.ToHtml() @localeModel["BtnText"]
                    </div>
                </div>
            </div>
        }

    </div>

</div>           
<!-- /WRAPPER -->

@ModalHelper.GetLoadingModal()

@section scripts{
    
    @JSValidationHelper.GetDich(jsObject)
    <script>
        EnableOnChangePropertyValidation("Subject");
        EnableOnChangePropertyValidation("Description");
        EnableOnChangePropertyValidation("OtherSubject");
        EnableOnChangePropertyValidation("Email");
        EnableOnChangePropertyValidation("Name")
    </script>

   <!--Popover activator-->
<script>
        var popoverBtns = $(".popoverBtn");

        var activator = function () {
            popoverBtns.popover();
        }();

        function HidePopovers() {
            popoverBtns.popover('hide');
        }

</script>
<!--/Tooltip activator-->

<!--DateTimePicker-->
@Html.GetDateTimeScriptsAndStyles()
@ViewExtensions.GetDateTimeScriptsAndStyles(dateTimePickerId: PropertyNameHelper.GetIdForInput("CompletionDate"), pickTime: false)
<!--/DateTimePicker-->

<script>
        var subjectList = document.getElementById("Subject" + "@PropertyNameHelper.InputAddition");
        var opts = subjectList.options.length;
        for (var i = 0; i < opts; i++) {
            if (subjectList.options[i].value.toString() == "1") {
                subjectList.options[i].selected = true;
                break;
            }
        }
</script>


 @ViewExtensions.GetDateParseScripts()

<script>
        function daydiff(dateToCompare) {
            var dateNow = new Date();
            return Math.round((dateToCompare - dateNow) / (1000 * 60 * 60 * 24)) + 1;
        }
</script>  

<!--Скрипты с датой-->
<script>

        $("#@PropertyNameHelper.GetIdForInput("CompletionDate")").change(function (e) {
            dateAndWorkTypeCheck()
        });

        $("#@PropertyNameHelper.GetIdForInput("WorkType")").change(function (e) {
            dateAndWorkTypeCheck()
        });

        function dateAndWorkTypeCheck()
        {
            var days = parseInt(daydiff(parseDate(document.getElementById("@PropertyNameHelper.GetIdForInput("CompletionDate")").value)))
            var workType = parseInt(document.getElementById("@PropertyNameHelper.GetIdForInput("WorkType")").value);

            return CheckDaysForWorkType(days, workType)
        }


        function CheckDaysForWorkType(days, workType)
        {
            console.log("days : " + days + " workType : " + workType);


                switch (workType) {
                    case 0:
                        if (days < 3) {
                            //ShowBigError("@Runtasker.Resources.Views.Orders.Create.Create.FinishDateErrorOrdinary");
                            WriteError("WorkType", "@(new HtmlString(Runtasker.Resources.Views.Orders.Create.Create.FinishDateErrorOrdinary))");
                            WriteError("CompletionDate", "@(new HtmlString(Runtasker.Resources.Views.Orders.Create.Create.FinishDateErrorOrdinary))");
                            ShowError("CompletionDate");
                            ShowError("WorkType");

                            MakeFormError("WorkType");
                            MakeFormError("CompletionDate");
                            return false;
                        }
                        else
                        {
                            MakeFormSuccess("WorkType");
                            MakeFormSuccess("CompletionDate");
                            return true;
                        }
                        break;
                    case 1:
                        if (days < 7) {

                            WriteError("WorkType", "@(new HtmlString(Runtasker.Resources.Views.Orders.Create.Create.FinishDateErrorEssay))");
                            WriteError("CompletionDate", "@(new HtmlString(Runtasker.Resources.Views.Orders.Create.Create.FinishDateErrorEssay))");
                            ShowError("CompletionDate");
                            ShowError("WorkType");
                            MakeFormError("WorkType");
                            MakeFormError("CompletionDate");
                            return false;
                        }
                        else
                        {
                            MakeFormSuccess("WorkType");
                            MakeFormSuccess("FinishDate");
                            return true;
                        }
                        break;
                    case 2:
                        if (days < 30)
                        {

                            WriteError("WorkType", "@(new HtmlString(Runtasker.Resources.Views.Orders.Create.Create.FinishDateErrorCourseWork))");
                            WriteError("FinishDate", "@(new HtmlString(Runtasker.Resources.Views.Orders.Create.Create.FinishDateErrorCourseWork))");
                            ShowError("FinishDate");
                            ShowError("WorkType");
                            MakeFormError("WorkType");
                            MakeFormError("FinishDate");
                            return false;
                        }
                        else
                        {
                            MakeFormSuccess("WorkType");
                            MakeFormSuccess("FinishDate");
                            return true;
                        }
                        break;
                    default:
                        alert('Я таких значений не знаю');
                }
            }
</script>
<!--/Скрипты с датой-->




    <!--Обработчики перед отправкой-->
    <script>
        var fakeSendBtn = $("#fakeSendBtn");
        
        fakeSendBtn.click(function (e) {
            e.preventDefault();

            if (ValidateModel())
            {
                if (dateAndWorkTypeCheck()) {
                    ShowHideModal();
                    document.getElementById("realSubmit").click();
                }
            }
        })

    </script>
    <!--/Обработчики перед отправкой-->
}

