@using Runtasker.HtmlExtensions
@using HtmlExtensions.StaticRenderers
@using Extensions.String
@using Runtasker.LocaleBuilders.Models
@using Common.JavascriptValidation.Statics
@using Runtasker.Logic.Models

@model OrderCreateModel
@{
    LocaleViewModel localeModel = ViewData["localeModel"] as LocaleViewModel;
    ViewBag.Title = localeModel["Title"];

    //получаем листы по перечислениям
    List<SelectListItem> subjects = StaticHtmlClassesHelper.GetSortedSubjectEnumList().ToList();
    List<SelectListItem> workTypes = StaticHtmlClassesHelper.GetWorkTypeEnumList().ToList();


    int count = subjects.Count - 1;
    int whichSubject = (int)Model.Subject - 1;

    whichSubject = (whichSubject == 0) ? count : whichSubject;

    

    //for datetime picker
    string langCode = StaticHtmlClassesHelper.GetLangCode();

    string jsObject = JSValidationMaker.GetJSValidationObject(typeof(OrderCreateModel));
}


    @AlertHelper.GetAlertWithActionBtn(
        localeModel["OnlineHelpAlertTitle"],
        localeModel["OnlineHelpAlertText"],
        localeModel["OnlineHelpBtnText"].WrapToA(new { href = "/Orders/OnlineHelp", @class = "btn btn-success" }))

<!-- PAGE TITLE -->
<header id="page-title">
    <div class="container">
        <h1>@ViewBag.Title</h1>
        <ul class="breadcrumb">
            <li><a href="/Home/Index">@localeModel["HomeNav"]</a></li>
            <li><a href="/Orders/Index">@localeModel["MyOrdersNav"]</a></li>
            <li class="active">@localeModel["CreateNav"]</li>
        </ul>
    </div>
</header>

<div class="page-header">
    <h1>
        @localeModel["Header"]
        <small>@localeModel["MiniHeader"]</small>
    </h1>
</div>

@using (Html.BeginForm("Create", "Orders", FormMethod.Post, htmlAttributes: new { id="myForm", enctype = "multipart/form-data" }))
{
    <div class="form-horizontal">
        @Html.ValidationErrorsToAlerts()
        @Html.AntiForgeryToken()

        <div id="bigError" class="alert alert-danger">
            <i class="fa fa-frown-o"></i>
            <strong id="bigErrorText"></strong>
        </div>

        
        @Html.LabelAndDropDownListFor(x => x.WorkType, workTypes, showPopover: true)
        
        @Html.LabelAndDropDownListFor(x => x.Subject, selectList: subjects, showPopover: true)
        
        @Html.LabelAndTextBoxFor(x => x.OtherSubject, showPopover: true)

        @Html.LabelAndDateTimePickerFor(x => x.FinishDate, showPopover: true)
        
        
        <!--FilesUpload-->
        <div class="form-group">
            @Html.LabelFor(model => model.FileUpload, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-5">
                <p>
                    <div class='input-group'>
                        @Html.TextBoxFor(model => model.FileUpload, htmlAttributes: new { id = "fileUpload", type = "file", multiple = "" })
                        <div class='input-group-btn'>
                            <div class="pull-right">
                                @Html.PopoverInfoFor(model => model.FileUpload, htmlAttributes: new {@class = "circle"})
                                <style>
                                    .circle {
                                        border: solid 1px #000;
                                        border-radius: 45%;
                                    }
                                </style>
                            </div>
                        </div>
                        </div>
                </p>              
            </div>
        </div>
        <!--/FilesUpload-->

        @Html.LabelAndTextAreaFor(x => x.Description)

        <div class="form-group">
            <div class="col-md-offset-2 col-md-10">
                <button id="fakeCreate" type="button" class="btn-lg btn btn-primary">
                    @localeModel["CreateOrder"]
                </button>
            </div>
        </div>
        <input id="realCreate" type="submit" class="hidden" />
    </div>
}

<!---->
<hr class="half-margins"/>
<!--Back to List-->
<div>
    <a href="@Url.Action("Index", "Orders")" class="btn btn-default">
        @FASigns.DoubleBack.ToHtml() @localeModel["BackToList"]
    </a>
</div>
<!--/Back to List/-->

@section scripts
{

    @JSValidationHelper.GetDich(jsObject)

    

    <!--Popover activator-->
    <script>
        var popoverBtns = $(".popoverBtn");

        var activator = function()
        {
            popoverBtns.popover();
        }();

        function HidePopovers()
        {
            popoverBtns.popover('hide');
        }
        
    </script>
    <!--/Tooltip activator-->
    
    <!--DateTimePicker-->
    @Html.GetDateTimeScriptsAndStyles()
    @ViewExtensions.GetDateTimeScriptsAndStyles(dateTimePickerId: PropertyNameHelper.GetIdForInput("FinishDate"), pickTime: false)
    <!--/DateTimePicker-->

    <!--Other Subject Scripts-->
    @OrderScripts.GetSubjectCheckers(localeModel)
    <!--/Other Subject Scripts-->

    <!--Date Scripts-->
    @ViewExtensions.GetDateParseScripts()

    <script>
        function daydiff(dateToCompare) {
            var dateNow = new Date();
            return Math.round((dateToCompare - dateNow) / (1000 * 60 * 60 * 24)) + 1;
        }
    </script>
    <!--/Date Scripts-->

    

    <!--SendOrderScripts-->    
    <script>
        var realCreate = $('#realCreate');
        var fakeCreate = $('#fakeCreate');
        var hiddenSubject = $('#hiddenSubject');
        var otherSubject = $('#OtherSubject');
        var myForm = $('#myForm');
        var uploadProgress = $('#uploadProgress');



        fakeCreate.click(function(){

            if (subjectList.val() != 0)
            {
                otherSubject.val("Selected");
            }

            if(hasFilesToUpload())
            {
                console.log("has files");
                uploadProgress.removeClass('hidden');
            }

            var count = 0;
            //logging
            
            count = (CheckOtherSubject()) ? count + 1 : count;
            count = (dateAndWorkTypeCheck()) ? count + 1 : count;
            count = (CheckDescription()) ? count + 1 : count;

            if (count == 3) {
                realCreate.click();
            }

            
        });
    </script>
    <!--/SendOrderScripts-->

    

    <!--Restore Condition Scripts-->
    <script>
        console.log("restore");

        var userSubjectForm = $('#userSubjectForm');
        var subjectList = $("#subjectList");

        var RestoreCondition = function()
        {
            console.log(@whichSubject);
            if(@whichSubject == (0))
            {
                ShowObject(userSubjectForm);
            }
            if(@whichSubject != -1)
            {
                subjectList.get(0).selectedIndex = @whichSubject;
            }


        }();
    </script>
    <!--/Restore Condition Scripts-->

    <!--Скрипты по умолчанию для предмета-->
    @*@OrderScripts.GetDefaultSubjectScripts()*@
    <!--/Скрипты по умолчанию для предмета-->
    
}