@using Runtasker.Logic.Entities
@using Runtasker.ExtensionsUI.UIExtensions.Orders
@using HtmlExtensions.StaticRenderers
@using Extensions.String
@using Runtasker.Resources.Views.Orders.Index
@model IEnumerable<Order>

@{
    ViewBag.Title = Index.Title;
}

<div>
    
    <!-- PAGE TITLE -->
    <header id="page-title">
        <div class="container">
            <h1>@ViewBag.Title</h1>

            <ul class="breadcrumb">
                <li><a href="/Home/Index">@Index.HomeNav</a></li>
                <li class="active">@Index.Title</li>
            </ul>
        </div>
    </header>

    <!--Sort Buttons-->
    <div class="row">
        <div class="col-md-6">
            <a href="@Url.Action("Create","Orders")" class="btn btn-success btn-lg">
                <span class='glyphicon glyphicon-plus-sign'></span> @Index.CreateNew
            </a>
        </div>

        @if (Model.Count() > 0 && 
            Model.Count(o => o.Status.GetActiveStatus() == "active") > 0 && 
            Model.Count(o => o.Status.GetActiveStatus() == "finished") > 0)
        {
        <!--Sort Panel-->
        <div class="col-md-6">
            <div class="pull-right">
                <div class="btn-group">
                    <ul class="pager">
                        <li>
                            <a href="#" class="btn btn-default btn-filter" data-target="active">
                                @Index.Active @GISigns.Count(Model.Count(o => o.Status.GetActiveStatus() == "active")).ToHtml()
                            </a>
                        </li>
                        <li>
                            <a href="#" class="btn btn-default btn-filter" data-target="finished">
                                @Index.Finished @GISigns.Count(Model.Count(o => o.Status.GetActiveStatus() == "finished")).ToHtml()
                            </a>
                        </li>
                        <li>
                            <a href="#" class="btn active btn-default btn-filter" data-target="all">
                                @Index.All @GISigns.Count(Model.Count()).ToHtml()
                            </a>
                        </li>
                    </ul>
                </div>
            </div>
        </div>
        <!--Sort Panel-->
        }
    </div>
    <!--/Sort Buttons-->

    @if (Model.Count() > 0)
    {
        @Styles.Render("~/OrdersList")
        //It must react on order status by styles like default danger and then add some status icon
        foreach (Order order in Model)
        {
            @MvcHtmlString.Create(new CustomerOrderHtmlEntity(order).ToString());
        }
    }
    else
    {
        <p class="text-info">
            <h3>
                <strong>
                    @Index.NotHaveAnyOrders
                </strong>
            </h3>
        </p>
    }
</div>

@section scripts{
    <!--Modal Functions-->
    <script>
        function MakeLoading(elementId) {
            var sp = document.createElement("span");
            sp.className = "text-center";

            sp.className = "fa fa-spinner fa-5x fa-spin";

            var searchResult = document.getElementById(elementId);

            searchResult.innerHTML = "";

            searchResult.appendChild(sp);

        }
    </script>
    <!--/Modal Functions-->

    <!--Rating togglers scripts-->
    <script>
        var rateLinks = $('.rateLink');

        var modalBodyId = "modalBody";
        var modalBody = $('#' + modalBodyId);

        var myModal = $('#myModal');

        rateLinks.click(function (e) {
            e.preventDefault();
            var id = $(this).attr('id');
            myModal.modal('show');
            $('#chatMenu').collapse('hide');
            GetModalData(id);
        });

        function GetModalData(id) {
            console.log('getmodalData');

            MakeLoading(modalBodyId);

            $.ajax({
                type: "GET",
                url: '/Orders/Rating/' + id,
                contentType: false,
                processData: false,
                async: true,
                data: null,
                success: function (result) {
                    modalBody.html(result);
                },
                error: function (xhr, status, p3) {
                    alert(xhr.responseText);
                }
            });
        }
    </script>
    <!--/Rating togglers scripts-->

    <!--Filter scripts-->
    <script>
        $(document).ready(function () {
            var filterBtns = $('.btn-filter');

            filterBtns.on('click', function () {
                var $target = $(this).data('target');

                filterBtns.removeClass('active');
                $(this).addClass('active');

                if ($target != 'all') {
                    $('.bs-calltoaction').css('display', 'none');
                    $('.bs-calltoaction[data-status="' + $target + '"]').fadeIn('slow');
                } else {
                    $('.bs-calltoaction').css('display', 'none').fadeIn('slow');
                }
            });



        });
    </script>
    <!--/Filter scripts-->

    <!--Chat tooglers scripts-->
    <script>
        $(document).ready(function () {
            var chatTogglers = $('.orderChat');

            var modalBodyId = "modalBody";
            var modalBody = $('#' + modalBodyId);
            var myModal = $('#myModal');

            chatTogglers.click(function (e) {
                console.log("chat toggler")
                e.preventDefault();

                var id = $(this).attr('id');
                myModal.modal('show');
                GetModalData(id);
            });

            function GetModalData(id) {

                MakeLoading(modalBodyId);

                $.ajax({
                    type: "GET",
                    url: '/Message/ChatAboutOrder/?orderId=' + id,
                    contentType: false,
                    processData: false,
                    async: true,
                    data: null,
                    success: function (result) {
                        modalBody.html(result);
                    },
                    error: function (xhr, status, p3) {
                        alert(xhr.responseText);
                    }
                });
            }
        });
    </script>
    <!--/Chat togglers scripts-->
}
