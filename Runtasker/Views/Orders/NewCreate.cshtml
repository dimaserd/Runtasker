@using Runtasker.Logic.Entities
@using Runtasker.HtmlExtensions
@using HtmlExtensions.Renderers
@using Extensions.String
@using Runtasker.Resources.Views.Orders.Create

@model Runtasker.Logic.Models.OrderCreateModel
@{
    ViewBag.Title = Create.Title;

    List<SelectListItem> subjects = new List<SelectListItem>();

    foreach (Subject item in Enum.GetValues(typeof(Subject)))
    {
        subjects.Add(new SelectListItem { Value = ((int)item).ToString(), Text = item.ToDescriptionString(), Selected = (int)item == 0 });
    }
    int count = subjects.Count - 1;
    int whichSubject = (int)Model.Subject;

    FontAwesomeRenderer FASigns = new FontAwesomeRenderer();

    //for datetime picker
    string lang = ViewData["Language"] as string;
    string language = (lang.Contains("Рус")) || (lang.Contains("Rus")) ? "ru" : "en";
}


<!-- PAGE TITLE -->
<header id="page-title">
    <div class="container">
        <h1>@ViewBag.Title</h1>
        <ul class="breadcrumb">
            <li><a href="/Home/Index">@Create.HomeNav</a></li>
            <li><a href="/Orders/Index">@Create.MyOrdersNav</a></li>
            <li class="active">@Create.CreateNav</li>
        </ul>
    </div>
</header>

<div class="page-header">
    <h1>
        @Create.Header
        <small>@Create.MiniHeader</small>
    </h1>
</div>

@using (Html.BeginForm("Create", "Orders", FormMethod.Post, htmlAttributes: new { id = "myForm", enctype = "multipart/form-data" }))
{
    <div class="form-horizontal">
        @Html.ValidationErrorsToAlerts()
        @Html.AntiForgeryToken()

        <!--SubjectsList-->
        <div class="form-group">
            @Html.LabelFor(model => model.Subject, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-5">
                <div class="input-group">
                    @Html.DropDownList("Subject", selectList: subjects, htmlAttributes: new { id = "subjectList", @class = "form-control" })
                    <div class="input-group-btn">
                        @Html.PopoverInfoFor(model => model.Subject)
                    </div>
                </div>
            </div>
        </div>
        
        <!--UserSubjectForm-->
        @Html.LabelAndEditorFor(model => model.OtherSubject, htmlAttributes: new { @class = "hidden", id = "userSubjectForm" })
        <!--/UserSubjectForm-->
        <!--DataTime Picker-->
        <div class="form-group">
            @Html.LabelFor(model => model.FinishDate, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="date col-md-5">
                <!--input-group date-->
                <input type="text" class="form-control" id="datetimepicker1" name="FinishDate" value="@Model.FinishDate.ToShortDateString()" />
            </div>
        </div>
        <!--End of DateTimePicker-->
        <!--FilesUpload-->
        <div class="form-group">
            @Html.LabelFor(model => model.FileUpload, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-5">
                <p>
                    <div class='input-group'>
                        @Html.TextBoxFor(model => model.FileUpload, htmlAttributes: new { id = "fileUpload", type = "file", multiple = "" })
                        <div class='input-group-btn'>
                            <div class="pull-right">
                                @Html.PopoverInfoFor(model => model.FileUpload, htmlAttributes: new { @class = "circle" })
                                <style>
                                    .circle {
                                        border: solid 1px #000;
                                        border-radius: 45%;
                                    }
                                </style>
                            </div>
                        </div>
                    </div>
                </p>
            </div>
        </div>
        <!--/FilesUpload-->
        <!--Decription-->
        <div class="form-group">
            @Html.LabelFor(model => model.Description, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-5">
                @Html.TextAreaFor(model => model.Description,
                    htmlAttributes: new
                    {
                        @class = "form-control",
                        rows = "3",
                        placeholder = Create.DescriptionPlaceholder
                    })
                @Html.ValidationMessageFor(model => model.Description, "", new { id = "descriptionError", @class = "text-danger" })
            </div>
        </div>
        <!--/Description-->
        <!--Hidden fields for sending-->
        <input id="hiddenSubject" type="hidden" value="0" name="Subject" />

        <div class="form-group">
            <div class="col-md-offset-2 col-md-10">
                <button id="fakeCreate" type="button" class="btn-lg btn btn-primary">
                    @Create.CreateOrder
                </button>
            </div>
        </div>
        <input id="realCreate" type="submit" class="hidden" />
    </div>
}

<!--Upload Progress Bar-->
<div class="row">
    <div id="uploadProgress" class="hidden col-md-5">
        <div class="row">
            <p class="h4">@Create.FileUploading</p>
            @FASigns.CircleONotch.X2().Animate().ToHtml()
        </div>
    </div>
</div>
<!--/Upload Progress Bar-->
<!---->
<hr />
<!--Back to List-->
<div>
    <a href="@Url.Action("Index", "Orders")" class="btn btn-default">
        @FASigns.DoubleBack.ToHtml() @Create.BackToList
    </a>
</div>
<!--/Back to List/-->

@section scripts
{
    @*<!--SpecifyScripts-->
        <script>
            var otherSubject = $("#otherSubject");
            var subjectList = $("#subjectList");
            var specifyDropDowns = $(".specifyDropDown");



            var SpecifyForms = new Array
                (
                    {
                        "Subject":"ForeignLanguage",
                        "Value":"0",
                        "InsertedValues" : new Array
                        (
                            {
                                "Subject" : "Английский язык",
                                "Value" : "0"
                            },

                            {
                                "Subject" : "Французский язык",
                                "Value" : "1"
                            },

                            {
                                "Subject" : "Итальянский язык",
                                "Value" : "2"
                            },

                            {
                                "Subject" : "Испанский язык",
                                "Value" : "3"
                            }
                        )
                    },

                    {"Subject":"AnotherSubject","Value":"AnotherNum"}
                );
            function IsSpecialSubject(subjectNum)
            {
                var result = false;
                for(i = 0; i < SpecifyForms.length; i++)
                {
                    if(subjectNum == SpecifyForms[i].Value)
                    {
                        result = true;
                        break;
                    }
                }
                return result;
            }

            var MainSettings = function Main()
            {
                $(document).ready(function(){
                    console.log("Main settings");
                    otherSubject.val(SpecifyForms[0].InsertedValues[0].Subject);
                })
            }();


            subjectList.change(function(){
                var triggerValue = $(this).val();

                //Hiding all additionalForms
                HidePopovers();
                for(i = 0; i < SpecifyForms.length; i++)
                {
                    HideObject($("#" + SpecifyForms[i].Subject + "Form"))
                }

                //Show only one that we need
                for(i = 0; i < SpecifyForms.length; i++)
                {
                    if(SpecifyForms[i].Value == triggerValue)
                    {
                        ShowObject($("#" + SpecifyForms[i].Subject + "Form"))
                        otherSubject.val(SpecifyForms[i].InsertedValues[0].Subject);
                    }
                }
            })

            specifyDropDowns.change(function(){
                otherSubject.val($(this).val());
                console.log(otherSubject.val());
            })
        </script>
        <!--/SpecifyScripts-->*@

    <!--Popover activator-->
    <script>
        var popoverBtns = $(".popoverBtn");

        var activator = function()
        {
            popoverBtns.popover();
        }();

        function HidePopovers()
        {
            popoverBtns.popover('hide');
        }

    </script>
    <!--/Tooltip activator-->
    <!--DateTimePicker-->
    @Scripts.Render("~/DateTimePicker")
    @Styles.Render("~/DateTimePickerCss")
    <script>
        $(function () {
            $('#datetimepicker1').datetimepicker({ pickTime: false, defaultDate: new Date(), minDate: new Date(), language: "@language" });
        });
        //http://itchief.ru/lessons/bootstrap-3/113-bootstrap-3-datetimepicker
    </script>
    <!--/DateTimePicker-->
    <!--Other Subject Scripts-->
    <script>
        var subjectList = $('#subjectList');
        var userSubjectForm = $('#userSubjectForm');
        var hiddenSubject = $('hiddenSubject');
        var otherSubject = $('#OtherSubject');

        subjectList.change(function () {
            hiddenSubject.val($(this).val());
            if($(this).val() == (@count))
            {
                otherSubject.val('');
                ShowObject(userSubjectForm);
            }
            else
            {
                HideObject(userSubjectForm);
            }
        });

        function ShowObject(obj)
        {
            if($(obj).hasClass('hidden'))
            {
                $(obj).removeClass('hidden');
            }
        }

        function HideObject(obj)
        {
            if(!$(obj).hasClass('hidden'))
            {
                $(obj).addClass('hidden');
            }
        }
    </script>
    <!--/Other Subject Scripts-->
    <!--SendOrderScripts-->
    <script>
        var realCreate = $('#realCreate');
        var fakeCreate = $('#fakeCreate');
        var hiddenSubject = $('#hiddenSubject');
        var otherSubject = $('#OtherSubject');
        var myForm = $('#myForm');
        var uploadProgress = $('#uploadProgress');



        fakeCreate.click(function(){

            if(hiddenSubject.val() != (@count))
            {
                console.log('yes')
                var result;

                if(!IsSpecialSubject(hiddenSubject.val()))
                {
                    otherSubject.val('selected');
                }
            }

            if(hasFilesToUpload())
            {
                console.log("has files");
                uploadProgress.removeClass('hidden');
            }
            realCreate.click();
        });
    </script>
    <!--/SendOrderScripts-->
    <!--Files uploading Scripts-->
    <script>
        var bar = $('.bar');
        var percent = $('.percent');
        var progressBar = $('.progress-bar');
        var uploadProgress = $('#uploadProgress');



        function progressBarChanger(percentComplete)
        {
            progressBar.attr('aria-valuenow', percentComplete);
            progressBar.html(percentComplete + '%');
            progressBar.attr('style', 'width: ' + percentComplete + '%;')
        }

        function hasFilesToUpload()
        {
            return (document.getElementById('fileUpload').files.length > 0);
        }
    </script>
    <!--/Files uploading Scripts-->
    <!--Restore Condition Scripts-->
    <script>
        console.log("restore");
        console.log(@whichSubject);
        var hiddenSubject = $('#hiddenSubject');
        var userSubjectForm = $('#userSubjectForm');

        var RestoreCondition = function()
        {
            hiddenSubject.val(@whichSubject);
            if(@whichSubject == (@count))
            {
                ShowObject(userSubjectForm);
            }


            if(IsSpecialSubject(@whichSubject))
            {

            }
        }();
    </script>
    <!--/Restore Condition Scripts-->


}