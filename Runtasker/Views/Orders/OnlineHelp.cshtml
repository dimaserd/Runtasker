@using Runtasker.Logic.Models.Orders
@using Runtasker.HtmlExtensions;
@using Runtasker.LocaleBuilders.Models
@using Runtasker.Logic.Entities
@using Common.JavascriptValidation.Statics
@using oksoft.Common.HtmlExtensions.Extensions
@using UI.Settings
@model OnlineOrderRequest
@{

    List<SelectListItem> subjects = StaticHtmlClassesHelper.GetSortedSubjectEnumList().ToList();

    LocaleViewModel localeModel = ViewData["localeModel"] as LocaleViewModel;

    ViewBag.Title = localeModel["Title"];

    string phoneNumber = User.Identity.GetPhoneNumber();

    string jsObject = JSValidationMaker.GetJSValidationObject(typeof(OnlineOrderRequest));
}

@AlertHelper.GetAlert(localeModel["HelpAlertTitle"], localeModel["HelpAlertText"])

<!-- PAGE TITLE -->
<header id="page-title">
    <div class="container">
        <h1>@localeModel["Header"]</h1>
        <ul class="breadcrumb">
            <li><a href="/Home/Index">@localeModel["HomeNav"]</a></li>
            <li><a href="/Orders/Index">@localeModel["MyOrdersNav"]</a></li>
            <li class="active">@localeModel["ActiveNav"]</li>
        </ul>
    </div>
</header>

@using (Html.BeginForm("OnlineHelp", "Orders", FormMethod.Post, htmlAttributes: new { id = "myForm", enctype = "multipart/form-data" }))
{
    <div class="@AtroposSettings.GetFormClass()">
        @Html.ValidationErrorsToAlerts()
        @Html.AntiForgeryToken()

        @Html.HiddenFor(m => m.OnlineHelpWorkType)

        <!--SubjectsList-->
        @Html.LabelAndDropDownListWithTooltipFor(x => x.Subject, subjects)
        <!--/SubjectList-->

        <!--UserSubjectForm-->
        @Html.LabelAndTextBoxWithTooltipFor(x => x.OtherSubject)
        <!--/UserSubjectForm-->

        <!--PhoneNumberForm-->
        @Html.LabelAndTextBoxWithTooltipFor(x => x.PhoneNumber)
        <!--/PhoneNumberForm-->

        <!--DateTime Picker-->
        @Html.LabelAndTextBoxWithTooltipFor(x => x.StartDate)      
        <!--End of DateTimePicker-->

        

        <!--FilesUpload-->
        @Html.LabelAndFileInputWithTooltipFor(x => x.FileUpload, multiple: true)
        <!--/FilesUpload-->

        <!--Decription-->
        @Html.LabelAndTextAreaWithTooltipFor(x => x.Description)
        <!--/Description-->

        <div class="form-group">
            <div class="">
                <button id="fakeCreate" type="button" class="btn-lg btn btn-primary">
                    @localeModel["SubmitBtnText"]
                </button>
            </div>
        </div>
        <input id="realCreate" type="submit" class="hidden" />
    </div>
}

@ModalHelper.GetLoadingModal()

@section scripts{
    
    @JSValidationHelper.GetDich(jsObject)
    <script>
        EnableOnChangePropertyValidation("Subject");
        EnableOnChangePropertyValidation("Description");
        EnableOnChangePropertyValidation("OtherSubject")
    </script>


    <!--DateTimePicker-->
@Html.GetDateTimeScriptsAndStyles()
@ViewExtensions.GetDateTimeScriptsAndStyles(dateTimePickerId: PropertyNameHelper.GetIdForInput("StartDate"), pickTime: true)
<!--/DateTimePicker-->
    
    <!--Активация всплывалок-->
<script>
        var popoverBtns = $(".popoverBtn");

        var activator = function () {
            popoverBtns.popover();
        }();

        function HidePopovers() {
            popoverBtns.popover('hide');
        }

</script>
<!--/Tooltip activator-->

    <!--Скрипты с телефонами-->
    <script src="https://cdnjs.cloudflare.com/ajax/libs/jquery.maskedinput/1.4.1/jquery.maskedinput.min.js"></script>

    <script>
        $("#" + "@PropertyNameHelper.GetIdForInput("PhoneNumber")").mask("8(999) 999-99-99");
    </script>

    @if(!string.IsNullOrEmpty(phoneNumber))
    {
        <script>
            document.getElementById("@PropertyNameHelper.GetIdForInput("PhoneNumber")").value = "@phoneNumber";
        </script>
    }
    <!--Скрипты с телефонами-->

    <!--Проверка мобильного телефона-->
<script>

        function RemoveMask(number)
        {
            return number.toString().replace("(", "")
                .replace(")", "")
                .replace(" ", "")
                .replace("-", "")
                .replace("-", "");
        }
        function ValidateNumber(number)
        {
            

            if (CheckPhoneNumber(RemoveMask(number)) && number.length > 11) {
                HideError("PhoneNumber");
                MakeFormSuccess("PhoneNumber");

                return true;
            }
            else {
                WriteError("PhoneNumber", "Вы ввели неправильный номер телефона!")
                ShowError("PhoneNumber");
                MakeFormError("PhoneNumber");

                return false;
            }
        }

        $("#" + "@PropertyNameHelper.GetIdForInput("PhoneNumber")").change(function (e) {
            e.preventDefault();
            ValidateNumber($(this).val());
        })


    

    //булева проверка мобильно телефона
    function CheckPhoneNumber(value) {
        
        var pattern = new RegExp(/^[\+]?[(]?[0-9]{3}[)]?[-\s\.]?[0-9]{3}[-\s\.]?[0-9]{4,6}$/im);

        return pattern.test(value);
    }
</script>

    <!--Логика при нажатии клика-->
    <script>
        var fakeCreate = $("#fakeCreate");

        
        fakeCreate.click(function (e) {
            if (ValidateModel() && ValidateNumber(document.getElementById("@PropertyNameHelper.GetIdForInput("PhoneNumber")").value))
            {
                console.log("Все условия пройдены!");
                ShowHideModal();
                document.getElementById("realCreate").click();
                
            }
            
        })
    </script>
    <!--/Логика при нажатии клика-->


    

    


}