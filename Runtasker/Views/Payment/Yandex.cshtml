@using HtmlExtensions.StaticRenderers
@using HtmlExtensions.Renderers
@using Extensions.String
@using Runtasker.LocaleBuilders.Models
@using Runtasker.Settings
@{
    LocaleViewModel localeModel = ViewData["localeModel"] as LocaleViewModel;
    ViewBag.Title = localeModel["Title"];

    

    string userGuid = ViewData["userGuid"] as string;
    decimal? sumToPay = ViewData["sumToPay"] as decimal?;
}
<!--Navigation-->
<header id="page-title">
    <div class="container">
        <h1>@ViewBag.Title</h1>
        <ul class="breadcrumb">
            <li><a href="/Home/Index">@localeModel["NavHome"]</a></li>
            <li><a href="/Payment/Index">@localeModel["NavPayment"]</a></li>
            <li class="active">@localeModel["NavActive"]</li>
        </ul>
    </div>
</header>
<!--/Navigation-->

<div class="page-header">
    <h1>@localeModel["ActionDesc"] <small>@localeModel["ActionDescMini"]</small></h1>
</div>

<div class="form-horizontal">
    <form method="POST" action="@YandexKassaSettings.DemoTestUrl">

        <!--label - это userguid-->
        <input name="shopId" value="@YandexKassaSettings.ShopId" type="hidden">
        <input name="scid" value="@YandexKassaSettings.SCId" type="hidden">
        <input name="label" value="@userGuid" type="hidden">
        <input name="receiver" value="410014471705465" type="hidden">
        <input name="quickpay-form" value="shop" type="hidden">
        <input type="hidden" name="targets" value="@localeModel["YandexDesc"]">
        <h4>@localeModel["Amount"]: </h4>
        <div class="row">
            <div class="col-md-5">
                <div class="input-group input-group-lg">

                    <input id="sum" class="form-control" name="sum" value="@((sumToPay.HasValue) ? sumToPay.Value : 0 )" maxlength="10" type="number" data-type="number">
                    <span class="input-group-addon">
                        @HtmlSigns.Rouble.ToHtml()
                    </span>
            </div>
        </div>
        </div>
        <div class="row">
            <h4 id="errorText" class="hidden text-danger paddingLeft">
                @localeModel["AmountErrorText"]
            </h4>
            <style>
                .paddingLeft{
                    padding-left : 15px;
                }

                .marginTop{
                    margin-top : 15px;
                }
            </style>
        </div>

        <div class="row paddingLeft">
            <h4>@localeModel["PaymentMethod"]: </h4>
            <input type="radio" name="paymentType" value="PC">@localeModel["YandexMoneyPM"]
            <input type="radio" name="paymentType" value="AC" checked="checked">@localeModel["BankingCardPM"]
        </div>

        <input name="successURL" value="https://runtasker.ru/" type="hidden">
        <input name="quickpay-back-url" value="https://runtasker.ru" type="hidden">
        <!--PsevdoButton Trick-->
        <input id="paySubmit" class="hidden" type="submit" name="submit-button" value="Pay">
    </form>
    <button id="fakeButton" class="btn btn-info btn-lg marginTop">
        @GISigns.PiggyBank.ToHtml() @localeModel["Pay"]
     </button>
</div>



<!--Explantion-->
<div class="row">
    <h4 class="text-info paddingLeft">
        @localeModel["InfoText"]
    </h4>
</div>
<!--/Explanation-->

<hr/>

<!--BackButton-->
<a href="@Url.Action("Index", "Payment")" class="btn btn-default">
    @FASigns.DoubleBack.Lg().ToHtml() @localeModel["BackToPM"]
</a>
<!--/BackButton-->
<style>
    .costyl {
        margin : 0 0 -20px 0 !important;
    }
</style>
@section scripts
{
<script>
    if ($(document).ready())
    {
        //Prevent Sending Form by clicking enter button
        $(window).keydown(function (event) {
            if (event.keyCode == 13) {
                event.preventDefault();
                return false;
            }
        });

        var fakeButton = $('#fakeButton');
        var sum = $("#sum");
        var errorText = $('#errorText');

        fakeButton.click(function (e) {
            if(SumIsNum())
            {
                
                if (!SumIsNumericNull())
                {
                    console.log(sum.val());
                    sum.val(SumToInt());
                    SendForm();
                }
                else
                {
                    NotificationShow();
                }
                
            }

        });

        sum.keyup(function (e) {
            var code = e.which; // recommended to use e.which, it's normalized across browsers
            if (code == 13) {
                fakeButton.click();
            }
        });

        sum.change(function (e) {
            e.preventDefault();
            if (SumIsGreaterThanNull()) {
                NotificationHide();
            }

            if(isNaN(sum.val()))
            {
                sum.val('0');
            }
        })

        function SumIsGreaterThanNull() {
            if (!SumIsNum) {
                return false;
            }

            return (Number(sum.val()) > 0)
        }

        sum.keydown(function (e) {
            var code = e.which;
            if (code == 69) {
                event.preventDefault();
                return false;
            }
        })

        function SumToInt()
        {
            return parseInt(sum.val());
        }

        function SumIsNum()
        {
            console.log(sum.val());
            
            return !isNaN(sum.val());
        }

        function SumIsNumericNull()
        {

            console.log(sum.val() == '0' || sum.val() == 0)
            return sum.val() == '0' || sum.val() == 0;
        }

        function SendForm()
        {
            var paySubmit = $('#paySubmit');
            paySubmit.trigger('click');
        }

        function NotificationShow()
        {
            errorText.removeClass('hidden');
        }

        function NotificationHide()
        {
            errorText.addClass('hidden');
        }
    }
</script>
}