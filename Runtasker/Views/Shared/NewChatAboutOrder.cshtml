@using Runtasker.Logic.Entities
@using Runtasker.ExtensionsUI.UIExtensions
@using Runtasker.Resources.Views.Shared.Chat
@using Extensions.String
@using Runtasker.Statics.Views
@model IEnumerable<Message>
@{

    Layout = ViewPaths.ModalLayoutPath;

    List<Message> messages;
    if (Model == null)
    {
        messages = null;
    }
    else
    {
        messages = Model.ToList();
    }
    string userGuid = ViewData["userGuid"] as string;
    //нужен хидден для отправки сообщений
    string toGuid = ViewData["toGuid"] as string;
    string senderName = ViewData["senderName"] as string;
    string receiverName = ViewData["receiverName"] as string;
    int orderId = (ViewData["orderId"] as int?).Value;


    string chatWithAboutOrder = string.Format("{0} {1}",
        string.Format(ChatRes.ChatWithFormat, receiverName.GetShortName()),
        string.Format(ChatRes.AboutOrderFormat, orderId).WrapToSpan(new { @class= "hidden-xs" }));

    string chatListId = "chatList";
}

@{ 
    string messageClass = "mes";
    string unreadClass = "unread";
    string sendBtnId = "sendBtn";
    string attachmentsId = "attachments";
    string textInputId = "messageText";
    string soundId = "audioSound";


    string downloadClassName = "fa fa-download";
    string downloadFilesText = "Скачать файлы";

    string colorCode = "#334faf";


}

@{ 
    string spanCollapseId = "spanCollapse";
    string unCollapsedClass = "glyphicon-chevron-down";
    string collapsedClass = "glyphicon-chevron-up";
}

@Styles.Render("~/Chat")

<!--Chat Body-->
    <div class="row">
        <div class="col-md-12" style="padding-left:2px!important;padding-right:2px!important">
            <div class="panel panel-primary">
                <div class="panel-heading" style="background-color:@colorCode" id="accordion">
                    <span class="glyphicon glyphicon-comment"></span> @chatWithAboutOrder.ToHtml()
                    <div class="btn-group pull-right">
                        <button id="chevron-down" class="btn btn-default btn-xs">
                            <span id="@spanCollapseId" class="glyphicon glyphicon-chevron-down"></span>
                        </button>
                    </div>
                </div>
                <div class="panel-collapse collapse" id="collapseOne">
                    <div id="chatbody" class="chatContent" style="border: @colorCode 2px solid;">
                        <ul class="chat" id="@chatListId" style="padding-left:2px!important;padding-right:2px!important">
                            @if (messages != null)
                            {
                                foreach (Message m in messages)
                                {
                                    HtmlMessage hm = new HtmlMessage(m, userGuid, senderName, receiverName);
                                    @MvcHtmlString.Create(hm.ToString())
                                }
                            }
                        </ul>
                    </div>
                    <div class="panel-footer" style="border-left: @colorCode 2px solid;border-right: @colorCode 2px solid;border-bottom: @colorCode 2px solid;">
                        <div class="input-group">
                            <input id="@textInputId" type="text" class="form-control input-sm" placeholder="@ChatRes.PlaceHolder" />
                            <span class="input-group-btn">
                                <button class="btn btn-warning btn-sm" id="@sendBtnId">
                                    @ChatRes.Send
                                </button>
                            </span>

                        </div>
                        <!--File downloading-->
                        <p>
                            <input type="file" id="@attachmentsId" multiple />
                        </p>
                    </div>
                </div>
            </div>
        </div>
    </div>
<!--/Chat Body-->


<style type="text/css">
    .unread {
        background-color: rgba(153,217,234, 0.25);
        border-radius: 5px;
    }

    .img-50 {
        width: 50px;
        height : auto;
    }
</style>





<!--AudioSound-->
<audio id="@soundId" src="~/assets/sounds/vk-1-zvuki-mp3.com_.mp3" type="audio/mp3"></audio>
<!--/AudioSound-->

<!--Скрытые поля для чата-->
<!--btn-input btn-send-->
<input id="senderId" type="hidden" value="@userGuid" />
<input id="receiverId" type="hidden" value="@toGuid" />
<input id="senderName" type="hidden" value="@senderName" />
<input id="receiverName" type="hidden" value="@receiverName" />
<input id="attachments" type="hidden"/>
<input id="orderId" type="hidden" value="@orderId"/>
<!--/Скрытые поля для чата-->



<!--Функции скролла-->
<script>
      var chatHidden = true;
        //чат скрыт
        function FocusSetter() {
            $('#@textInputId').focus();
        }

        function ShowHideChatBody() {
            $('#collapseOne').collapse('toggle');
            if (chatHidden) {
                chatHidden = !chatHidden;
                setTimeout(function () { scrollDownChatBody(900) }, 1);
            }
            else {
                chatHidden = !chatHidden;
            }
            ShowHideSpanChanger(chatHidden);
        }

        function ShowHideSpanChanger(isChatHidden)
        {
            var span = document.getElementById("@spanCollapseId");

            if (isChatHidden)
            {
                span.classList.remove("@collapsedClass");
                span.classList.add("@unCollapsedClass");

            }
            else
            {

                span.classList.remove("@unCollapsedClass");
                span.classList.add("@collapsedClass");
            }
        }

        $('#chevron-down').on('click', function (e) {
            ShowHideChatBody();
        })

    //проматывает список вниз
        function scrollDownChatBody(duration) {   //stop()
            $('#chatbody').stop().animate({
                scrollTop: $('#chatbody')[0].scrollHeight,
            }, duration, FocusSetter());
        }
</script>
<!--/Функции скролла-->

<!--Функции аудио-->
<script>
        function PlayAudio()
        {
            document.getElementById('@soundId').play();
        }
</script>
<!--/Функции аудио-->



<!--Построение сообщений-->
<script>
    function buildMessageForChat(message)
    {
        var li = document.createElement("li");
        //onclick="ReadMessage(${id})" onmouseover="ReadMessage(${id})"
        li.id = "mes" + message.MessageId;
        li.messageId = message.MessageId;
        

        if (IsSender(message)) {
            li.className = "mes right clearfix";
            li.innerHTML = GetMessageSenderHtml(message);
            
        }
        else {
            li.className = "mes left clearfix unread";
            li.innerHTML = GetMessageReceiverHtml(message);
            li.onclick = ReadMessage(`${message.MessageId}`);
            li.onmouseover = ReadMessage(`${message.MessageId}`);
        }

        return li;
    }

    
    
</script>
<!--/Построение сообщений-->

<!--Простое построение сообщений-->
<script>
    function IsSender(message)
    {
        return document.getElementById("senderId").value == message.SenderId;
    }

    function GetMessageSenderHtml(message) {
        var html =
            `<span class="chat-img pull-right">` +
            `<img src="/File/GetAvatar?userGuid=${message.SenderId}" alt="User Avatar" class="img-circle img-50">` +
            `</span>` +
            `<div class="chat-body clearfix">` + //нет разницы
            `<div class="header">` +//нет разницы
            `<small class="text-muted timeSpan">` +
            `<span class="glyphicon glyphicon-time"></span>${message.FormattedDate}` +
            `</small>` +
            `<strong class="pull-right primary-font">${document.getElementById('senderName').value}</strong>` +
            `</div>` +
            `<div class="row" style="margin-right:2px;margin-left: 2px;">` +
            `<p class="text-right">${message.Text}</p>` +
            `</div>`;

        if (message.AttachmentId != null) {
            html += `<div class="row" style="margin-right:2px;margin-left: 2px;">` +
                `<p class="text-right"><a href="/File/Download/${message.AttachmentId}">[Скачать файлы]</a></p>` +
                `</div>`;
        }


        html += `</div>`;



        return html;
    }

    function GetMessageReceiverHtml(message) {
        var html =
            `<span class="chat-img pull-left">` +
            `<img src="/File/GetAvatar?userGuid=${message.SenderId}" alt="User Avatar" class="img-circle img-50">` +
            `</span>` +
            `<div class="chat-body clearfix">` + //нет разницы
            `<div class="header">` +//нет разницы
            `<strong class="primary-font">${document.getElementById('receiverName').value}</strong>` +
            `<small class="pull-right text-muted timeSpan">` +
            `<span class="glyphicon glyphicon-time"></span>${message.FormattedDate}` +
            `</small>` +
            `</div>` +
            `<div class="row" style="margin-right:2px;margin-left: 2px;">` +
            `<p class="text-left">${message.Text}</p>` +
            `</div>`;

        if (message.AttachmentId != null) {
            html += `<div class="row" style="margin-right:2px;margin-left: 2px;">` +
                `<p class="text-left"><a href="/File/Download/${message.AttachmentId}">[Скачать файлы]</a></p>` +
                `</div>`;
        }


        html += `</div>`;

        return html;
    }

</script>
<!--Отправленное-->

<!---->

<!--Мелкие вспомогательные функции-->
<script>

    //очищает поля
    function ClearInputs()
    {
        $('#@textInputId').val('');
         $("#@attachmentsId").val('');
    }
</script>
<!--/Мелкие вспомогательные функции-->


<!--OrderChatHub-->
<script src="~/Scripts/jquery.signalR-2.2.2.js"></script>
<script src="~/signalr/hubs"></script>

<!--Скрипты для изменения счетчиков-->
<script>
    function DecreaseCount() {
        var countSpan = document.getElementById("mesCount@(orderId)");

        if (countSpan != null)
        {
            console.log("countSpan", countSpan);

            var count = parseInt(countSpan.innerText);
            countSpan.innerText = (count - 1).toString();
        }
    }

    function IncreaseCount()
    {
        var countSpan = document.getElementById("mesCount@(orderId)");

        if (countSpan != null)
        {
            console.log("countSpan", countSpan);

            var count = parseInt(countSpan.innerText);
            countSpan.innerText = (count + 1).toString();
        }

    }
</script>

<script>
    
</script>

<script>
    var chat = $.connection.newOrderChatHub;

    chat.client.onAddedToGroup = function (groupName)
    {
        console.log(groupName);
    }

    chat.client.onNewMessage = function (data) {
        console.log("Новое сообщение!", data);
        if (data.OrderId == document.getElementById("orderId").value && document.getElementById("mes" + data.MessageId) == undefined )
        {
            document.getElementById("@chatListId").appendChild(buildMessageForChat(data));

            //если сообщение принято играем музыку
            if (document.getElementById("senderId").value != data.SenderId) {
                PlayAudio();
                IncreaseCount(); //увеличиваю счетчик прочитанных сообщений
            }
            scrollDownChatBody(900);
        }



    }

    //клиентский обработчик прочитанного сообщения
    chat.client.onMessageRead = function (messageId) {
        console.log("onMessageRead", messageId);



        var message = $("#mes" + messageId);

        if (message.hasClass("@unreadClass"))
        {
            DecreaseCount();
            message.removeClass("@unreadClass");
        }
    }

    function ReadMessage(messageId) {

        console.log("ReadMessage", messageId);

                var mes = document.getElementById("mes" + messageId);

                if (mes == null) {
                    return;
                }

                if (mes.classList.contains("@unreadClass")){
                    var id = mes.getAttribute('messageid');

                    //ебаная заплатка
                    if (id == undefined || id == null)
                    {
                        console.log("Вход в ебаная заплатка", mes.id.toString().substring(3));
                        id = mes.id.toString().substring(3);
                    }
                    console.log("id сообщения", id);
                    chat.server.readMessageAboutOrder(id, document.getElementById("senderId").value)
                }
    }

    $.connection.hub.start()
        .done(function () {
            console.log('Now connected, connection ID=' + $.connection.hub.id);

            //Простое построение сообщений


            function buildMessageForChat(message) {
                console.log("buildMessageForChat", message);

                var li = document.createElement("li");
                //onclick="ReadMessage(${id})" onmouseover="ReadMessage(${id})"
                li.id = "mes" + message.MessageId;

                li.messageid = message.MessageId.toString();

                if (IsSender(message)) {
                    li.className = "mes right clearfix";
                    li.innerHTML = GetMessageSenderHtml(message);

                }
                else {
                    li.className = "mes left clearfix unread";
                    li.innerHTML = GetMessageReceiverHtml(message);
                    li.onclick = ReadMessage(`${message.MessageId}`);
                    li.onmouseover = ReadMessage(`${message.MessageId}`);
                }

                return li;
            }

           

            //Простое построение сообщений

            //поставлено в надежде вылечить отправку
            chat.server.addToGroup(document.getElementById("senderId").value,
                document.getElementById("receiverId").value);

            //обработчик нажатия кнопки отправить
            $('#@sendBtnId').click(function (e) {
                console.log("клик на отправку")




                var files = document.getElementById('@attachmentsId').files;
                if (files.length > 0) {
                    if (window.FormData !== undefined) {
                        var data = new FormData();

                        for (var x = 0; x < files.length; x++) {
                            data.append("file" + x, files[x]);
                        }

                        ///отправляю аяксом файлы на сервер и ожидаю идентификатор для вложения
                        //чтобы отправить его на сервер
                        $.ajax({
                            type: "POST",
                            url: '@Url.Action("UploadFiles", "File")',
                            contentType: false,
                            processData: false,
                            data: data,
                            success: function (result) {

                                console.log("Ajax загрузка файлов id=" + result)

                                var Data = {
                                    SenderId: document.getElementById("senderId").value,
                                    ReceiverId: document.getElementById("receiverId").value,
                                    SenderName: document.getElementById("senderName").value,
                                    ReceiverName: document.getElementById("receiverName").value,
                                    Text: document.getElementById("@textInputId").value,
                                    OrderId: document.getElementById("orderId").value,
                                    AttachmentId: result,
                                }

                                chat.server.sendMessageAboutOrder(Data);

                                //очищение инпутов независимо от ветки отправки
                                ClearInputs();
                            },
                            error: function (xhr, status, p3) {
                                alert(xhr.responseText);
                            }
                        });
                    }
                    else {
                        alert("Браузер не поддерживает загрузку файлов HTML5!");
                    }
                }
                else {
                    var Data = {
                        SenderId: document.getElementById("senderId").value,
                        ReceiverId: document.getElementById("receiverId").value,
                        SenderName: document.getElementById("senderName").value,
                        ReceiverName: document.getElementById("receiverName").value,
                        Text: document.getElementById("@textInputId").value,
                        OrderId: document.getElementById("orderId").value,
                    }

                    chat.server.sendMessageAboutOrder(Data);

                    //очищение инпутов независимо от ветки отправки
                    ClearInputs();
                }


            });



            ///обработчик события когда мышь нахожится на сообщении
            $(document.body).on("mouseenter", ".@messageClass", function () {

                var message = $(this);

                if (message.hasClass("@unreadClass")) {
                    var id = message.attr('messageId');
                    console.log(id);
                    chat.server.readMessageAboutOrder(id, document.getElementById("senderId").value)
                }

            });

            //обработчик нажатия на не прочитанное сообщение (сделано для мобил так у них нет такого понятия как наведение мыши)
            $(document.body).on("click", ".@messageClass", function () {
                var message = $(this);

                if (message.hasClass("@unreadClass")) {
                    var id = message.attr('messageid');
                    

                    if (id == undefined || id == null)
                    {
                        id = message.attr('id').toString().substring(3);
                    }
                    console.log(id);
                    chat.server.readMessageAboutOrder(id, document.getElementById("senderId").value)
                }
            });
        });



</script>
<!--/OrderChatHub-->


<script>
    
</script>