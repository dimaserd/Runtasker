@using Runtasker.Logic.Models.Orders
@model AnonymousKnowThePrice
@using Runtasker.HtmlExtensions
@using Runtasker.LocaleBuilders.Models
@using HtmlExtensions.Renderers
@using Extensions.String
@{ 
    //получаем списки для выпадающих меню
    List<SelectListItem> subjectsList = StaticHtmlClassesHelper.GetSortedSubjectEnumList().ToList();
    List<SelectListItem> workTypesList = StaticHtmlClassesHelper.GetWorkTypeEnumList().ToList();


    string langCode = StaticHtmlClassesHelper.GetLangCode();

    LocaleViewModel localeModel = ViewData["localeModel"] as LocaleViewModel;
    MvcHtmlString header = MvcHtmlString.Create($"<h2>{localeModel["HtmlActionDesc"]}</h2>");
    GlyphiconRenderer GISigns = new GlyphiconRenderer();

    ViewBag.Title = localeModel["ActionDescMini"];
}
  


<!-- WRAPPER -->
<div>

    <!-- PAGE TITLE -->
    <header id="page-title">
        <div class="container">
            <h1>@localeModel["ActionDescMini"]</h1>
            <ul class="breadcrumb">
                <li><a href="@Url.Action("Index","Home")">@localeModel["HomeNav"]</a></li>
                <li class="active">@localeModel["ActiveNav"]</li>
            </ul>
        </div>
    </header>

    <section id="contact" class="container">
        @Html.ValidationErrorsToAlerts()
        <div class="row">
            <!-- FORM -->
            <div class="col-md-12">
                @header

                @using (Html.BeginForm("KnowPrice", "Home", FormMethod.Post, htmlAttributes: new { id = "contactForm", @class = "white-row", enctype = "multipart/form-data" }))
                {
                    <div class="row">
                        
                        @Html.ValidationErrorsToAlerts()
                        
                        <div id="bigError" class="alert alert-danger">
                            <i class="fa fa-frown-o"></i>
                            <strong id="bigErrorText"></strong>
                        </div>

                        <div class="form-group">
                            <div id="NameForm" class="col-md-6">
                                @Html.LabelFor(m => m.Name)
                                
                                @Html.TextBoxFor(m => m.Name, htmlAttributes: new { @class = "form-control", id = "NameField" })
                                <p id="NameError" class="text-danger">
                                    Teкст ошибки
                                </p>
                            </div>
                        
                            <div id="EmailForm" class="col-md-6">
                                @Html.LabelFor(m => m.Email)
                                @Html.TextBoxFor(m => m.Email, htmlAttributes: new { @class = "form-control", id = "EmailField" })
                                <p id="EmailError" class="text-danger">
                                    Текст ошибки
                                </p>
                            </div>
                        
                            @*<div class="col-md-4">
                                @Html.LabelFor(m => m.PhoneNumber)
                                @Html.TextBoxFor(m => m.PhoneNumber, htmlAttributes: new { @class = "form-control", type = "tel", id = "PhoneNumber" })
                            </div>*@
                        </div>
                    </div>
                    <div class="row">
                        <div class="form-group">
                            <div id="WorkTypeForm" class="col-md-6">
                                @Html.LabelFor(m => m.WorkType)
                                @Html.DropDownListFor(m => m.WorkType, selectList: workTypesList, htmlAttributes: new { @class = "form-control", id = "WorkTypeField" })
                                
                            </div>

                            <div id="SubjectForm" class="col-md-6">
                                @Html.LabelFor(m => m.Subject)
                                @Html.DropDownListFor(m => m.Subject, selectList: subjectsList, htmlAttributes: new { @class = "form-control", id = "subjectList" })
                            </div>
                        </div>
                    </div>



                    <div id="OtherSubjectForm" class="form-group">
                        <div class="col-md-12">
                            @Html.LabelFor(m => m.OtherSubject)
                            @Html.TextBoxFor(m => m.OtherSubject, htmlAttributes: new { id = "OtherSubject", @class = "form-control" })
                            <p id="OtherSubjectError" class="text-danger">

                            </p>
                        </div>
                    </div>




                    <div class="row">
                        <div class="form-group">
                            <!--DateTime Picker-->
                            <div id="DateForm" class="col-md-6">
                                @Html.LabelFor(model => model.CompletionDate )
                                <div class="date">
                                    <!--input-group date-->
                                    <input type="text" class="form-control" id="datetimepicker1" name="CompletionDate" />
                                </div>
                            </div>
                            <!--End of DateTimePicker-->
                            <style>
                                #FilesForm{
                                    padding-top: 15px;
                                }
                            </style>

                            <div id="FilesForm" class="col-md-6">
                                @Html.LabelFor(model => model.Files, htmlAttributes: new { @class = "control-label" })
                                @Html.TextBoxFor(model => model.Files, htmlAttributes: new { id = "fileUpload", type = "file", multiple = "" })
                                

                            </div>
                        </div>
                    </div>
                    

                    <div class="row">
                        <div class="form-group">
                            <div id="DescriptionForm" class="col-md-12">
                                @Html.LabelFor(m => m.Description)
                                @Html.TextAreaFor(m => m.Description,
                                htmlAttributes: new
                                {
                                    maxlength = "5000",
                                    rows = "10",
                                    @class = "form-control",
                                    placeholder = localeModel["DescriptionPlaceholder"],
                                    id = "DescriptionField"
                                })
                                <p id="DescriptionError" class="text-danger">
                                    Текст ошибки
                                </p>
                            </div>
                        </div>
                    </div>

                    <input id="realSubmit" class="hidden" type="submit" />
                    <br />

                    <div class="row">
                        <div class="col-md-12">
                            <span class="pull-right">
                                <!-- captcha -->
                            </span>
                            <div id="fakeSendBtn" class="btn btn-info">
                                @GISigns.PlusSign.ToHtml() @localeModel["BtnText"]
                            </div>
                        </div>
                    </div>
                }

            </div>
            <!-- /FORM -->
        </div>
    </section>
</div>
<!-- /WRAPPER -->

@section scripts{
    @Html.GetDateTimeScriptsAndStyles()

    @ViewExtensions.GetDateTimeScriptsAndStyles(null)
                                    
    

    <!--Defaults Subject Scripts-->
    @OrderScripts.GetDefaultSubjectScripts()
    <!--/Defaults Subject Scripts-->

    <!--Date Scripts-->
    @ViewExtensions.GetDateParseScripts()

    <script>
        function daydiff(dateToCompare)
        {
            var dateNow = new Date();
            return Math.round((dateToCompare - dateNow) / (1000 * 60 * 60 * 24)) + 1;
        }
    </script>
    <!--/Date Scripts-->
    

    <!--Обработчики предмета-->
    @OrderScripts.GetSubjectCheckers(localeModel)
    <!--/Обработчики предмета-->

    <!--Validation Coloring And Error Showing-->
    @OrderScripts.GetValidationColoringAndErrorShowing()
    <!--/Validation Coloring And Error Showing-->

    <!--Big Error Scripts-->
    @OrderScripts.GetBigErrorScripts()
    <!--/Big Error Scripts-->

    <!--Подготовительные скрипты по закрашиванию полей-->
    @OrderScripts.GetPreparingScripts()
    <!--/Подготовительные скрипты по закрашиванию полей-->

    <!--Обработчики имени и эмейла-->
    @OrderScripts.GetNameAndEmailHandlers(localeModel)
    <!--/Обработчики имени и эмейла-->

    <!--Обработчики даты и типа работы-->
    @OrderScripts.GetDateAndWorkTypeHandlers()
    <!--/Обработчики даты и типа работы-->

    <!--Обработчики Описания заказа-->
    @OrderScripts.GetDescriptionHandlers(localeModel)
    <!--/Обработчики Описания заказа-->

    <!--Обработчики перед отправкой-->
    <script>
        var fakeSendBtn = $("#fakeSendBtn");
        var realSubmit = $("#realSubmit");

        fakeSendBtn.click(function (e) {
            e.preventDefault();

            console.log("fakeBtn clicked");

            var count = 0;
            
            //isOk = CheckOtherSubject();
            
            console.log("Email " + CheckEmailField())
            console.log("OtherSubject " + CheckOtherSubject())
            console.log("date and workType " + dateAndWorkTypeCheck())
            console.log("description " + CheckDescription())


            //logging
            
            count = (CheckEmailField()) ? count + 1 : count;
            count = (CheckOtherSubject()) ? count + 1 : count;
            count = (dateAndWorkTypeCheck()) ? count + 1 : count;
            count = (CheckDescription()) ? count + 1 : count;

            if(count == 4)
            {
                realSubmit.click();
            }
        })

    </script>
    <!--/Обработчики перед отправкой-->
}

