@using Runtasker.HtmlExtensions
@using HtmlExtensions.StaticRenderers
@using Extensions.String
@using Runtasker.LocaleBuilders.Models

@model Runtasker.Logic.Models.OrderCreateModel
@{
    LocaleViewModel localeModel = ViewData["localeModel"] as LocaleViewModel;
    ViewBag.Title = localeModel["Title"];

    //получаем листы по перечислениям
    List<SelectListItem> subjects = StaticHtmlClassesHelper.GetSortedSubjectEnumList().ToList();
    List<SelectListItem> workTypes = StaticHtmlClassesHelper.GetWorkTypeEnumList().ToList();


    int count = subjects.Count - 1;
    int whichSubject = (int)Model.Subject - 1;

    whichSubject = (whichSubject == 0) ? count : whichSubject;

    

    //for datetime picker
    string langCode = StaticHtmlClassesHelper.GetLangCode();
}


    @AlertHelper.GetAlertWithActionBtn(
        localeModel["OnlineHelpAlertTitle"],
        localeModel["OnlineHelpAlertText"],
        localeModel["OnlineHelpBtnText"].WrapToA(new { href = "/Orders/OnlineHelp", @class = "btn btn-success" }))

<!-- PAGE TITLE -->
<header id="page-title">
    <div class="container">
        <h1>@ViewBag.Title</h1>
        <ul class="breadcrumb">
            <li><a href="/Home/Index">@localeModel["HomeNav"]</a></li>
            <li><a href="/Orders/Index">@localeModel["MyOrdersNav"]</a></li>
            <li class="active">@localeModel["CreateNav"]</li>
        </ul>
    </div>
</header>

<div class="page-header">
    <h1>
        @localeModel["Header"]
        <small>@localeModel["MiniHeader"]</small>
    </h1>
</div>

@using (Html.BeginForm("Create", "Orders", FormMethod.Post, htmlAttributes: new { id="myForm", enctype = "multipart/form-data" }))
{
    <div class="form-horizontal">
        @Html.ValidationErrorsToAlerts()
        @Html.AntiForgeryToken()

        <div id="bigError" class="alert alert-danger">
            <i class="fa fa-frown-o"></i>
            <strong id="bigErrorText"></strong>
        </div>

        <!--WorkTypeList-->
        <div class="form-group" id="WorkTypeForm">
            @Html.LabelFor(model => model.WorkType, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-5">
                <div class="input-group">
                    @Html.DropDownListFor(m => m.WorkType, workTypes, htmlAttributes: new { id="WorkTypeField",  @class = "form-control" })
                    <div class="input-group-btn">
                        @Html.PopoverInfoFor(model => model.WorkType)
                    </div>
                </div>
            </div>
        </div>
        <!--/WorkTypeList-->

        <!--SubjectsList-->
        <div id="SubjectForm" class="form-group">
            @Html.LabelFor(model => model.Subject, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-5">
                <div class="input-group">
                    @Html.DropDownListFor(m => m.Subject, selectList: subjects, htmlAttributes: new {id = "subjectList", @class = "form-control" })
                    <div class="input-group-btn">
                        @Html.PopoverInfoFor(model => model.Subject)
                    </div>
                </div>
            </div>
        </div>
        <!--/SubjectList-->

        <!--UserSubjectForm-->
        <div class="form-group" id="OtherSubjectForm">
            @Html.LabelFor(model => model.OtherSubject, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-5">
                <div class="input-group">
                    @Html.TextBoxFor(m => m.OtherSubject, htmlAttributes: new { id = "OtherSubject", @class = "form-control" })
                    <div class="input-group-btn">
                        @Html.PopoverInfoFor(m => m.OtherSubject)
                    </div>
                </div>
                <p id="OtherSubjectError" class="text-danger">

                </p>
            </div>
        </div>
        <!--/UserSubjectForm-->
        
        <!--DateTime Picker-->
        <div class="form-group" id="DateForm">
            @Html.LabelFor(model => model.FinishDate, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="date col-md-5">
                <!--input-group date-->
                <input type="date" class="form-control" id="datetimepicker1" name="FinishDate" />
            </div>
        </div>
        <!--End of DateTimePicker-->
        
        <!--FilesUpload-->
        <div class="form-group">
            @Html.LabelFor(model => model.FileUpload, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-5">
                <p>
                    <div class='input-group'>
                        @Html.TextBoxFor(model => model.FileUpload, htmlAttributes: new { id = "fileUpload", type = "file", multiple = "" })
                        <div class='input-group-btn'>
                            <div class="pull-right">
                                @Html.PopoverInfoFor(model => model.FileUpload, htmlAttributes: new {@class = "circle"})
                                <style>
                                    .circle {
                                        border: solid 1px #000;
                                        border-radius: 45%;
                                    }
                                </style>
                            </div>
                        </div>
                        </div>
                </p>              
            </div>
        </div>
        <!--/FilesUpload-->

        <!--Decription-->
        <div class="form-group" id="DescriptionForm">
            @Html.LabelFor(model => model.Description, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-5">
                @Html.TextAreaFor(model => model.Description,
                    htmlAttributes : new { @class = "form-control",
                        rows = "3",
                        id = "DescriptionField",
                        placeholder = localeModel["DescriptionPlaceholder"] } )
                @Html.ValidationMessageFor(model => model.Description, "", new { id = "descriptionError", @class = "text-danger" })
                <p id="DescriptionError" class="text-danger">

                </p>
            </div>
        </div>
        <!--/Description-->

        <div class="form-group">
            <div class="col-md-offset-2 col-md-10">
                <button id="fakeCreate" type="button" class="btn-lg btn btn-primary">
                    @localeModel["CreateOrder"]
                </button>
            </div>
        </div>
        <input id="realCreate" type="submit" class="hidden" />
    </div>
}

<!--Upload Progress Bar-->
<div class="row">
    <div id="uploadProgress" class="hidden col-md-5">
        <div class="row">
            <p class="h4">@localeModel["FileUploading"]</p>
            @FASigns.CircleONotch.X2().Animate().ToHtml()
        </div>
    </div>
</div>
<!--/Upload Progress Bar-->

<!---->
<hr/>
<!--Back to List-->
<div>
    <a href="@Url.Action("Index", "Orders")" class="btn btn-default">
        @FASigns.DoubleBack.ToHtml() @localeModel["BackToList"]
    </a>
</div>
<!--/Back to List/-->

@section scripts
{
    <!--Defaults-->
    <script>
        var defaults = function () {
            console.log($("#subjectList").get(0).selectedIndex);
            $("#subjectList").get(0).selectedIndex = 0;
            
        }();
    </script>
    <!--/Defaults-->

    <!--Popover activator-->
    <script>
        var popoverBtns = $(".popoverBtn");

        var activator = function()
        {
            popoverBtns.popover();
        }();

        function HidePopovers()
        {
            popoverBtns.popover('hide');
        }
        
    </script>
    <!--/Tooltip activator-->
    
    <!--DateTimePicker-->
    @Html.GetDateTimeScriptsAndStyles()
    @ViewExtensions.GetDateTimeScriptsAndStyles()
    <!--/DateTimePicker-->

    <!--Other Subject Scripts-->
    @OrderScripts.GetSubjectCheckers(localeModel)
    <!--/Other Subject Scripts-->

    <!--Date Scripts-->
    @ViewExtensions.GetDateParseScripts()

    <script>
        function daydiff(dateToCompare) {
            var dateNow = new Date();
            return Math.round((dateToCompare - dateNow) / (1000 * 60 * 60 * 24)) + 1;
        }
    </script>
    <!--/Date Scripts-->

<!--Validation Coloring And Error Showing-->
@OrderScripts.GetValidationColoringAndErrorShowing()
<!--/Validation Coloring And Error Showing-->

<!--Big Error Scripts-->
@OrderScripts.GetBigErrorScripts()
<!--/Big Error Scripts-->

<!--Подготовительные скрипты по закрашиванию полей-->
@OrderScripts.GetPreparingScripts()
<!--/Подготовительные скрипты по закрашиванию полей-->

<!--Обработчики имени и эмейла-->
@OrderScripts.GetEmailHandler(localeModel)
<!--/Обработчики имени и эмейла-->

<!--Обработчики даты и типа работы-->
@OrderScripts.GetDateAndWorkTypeHandlers()
<!--/Обработчики даты и типа работы-->

<!--Обработчики описания-->
@OrderScripts.GetDescriptionHandlers(localeModel)
<!--/Обработчики описания-->

    <!--SendOrderScripts-->    
    <script>
        var realCreate = $('#realCreate');
        var fakeCreate = $('#fakeCreate');
        var hiddenSubject = $('#hiddenSubject');
        var otherSubject = $('#OtherSubject');
        var myForm = $('#myForm');
        var uploadProgress = $('#uploadProgress');



        fakeCreate.click(function(){

            if (subjectList.val() != 0)
            {
                otherSubject.val("Selected");
            }

            if(hasFilesToUpload())
            {
                console.log("has files");
                uploadProgress.removeClass('hidden');
            }

            var count = 0;
            //logging
            
            count = (CheckOtherSubject()) ? count + 1 : count;
            count = (dateAndWorkTypeCheck()) ? count + 1 : count;
            count = (CheckDescription()) ? count + 1 : count;

            if (count == 3) {
                realCreate.click();
            }

            
        });
    </script>
    <!--/SendOrderScripts-->

    <!--Files uploading Scripts-->
    <script>
        var bar = $('.bar');
        var percent = $('.percent');
        var progressBar = $('.progress-bar');
        var uploadProgress = $('#uploadProgress');



        function progressBarChanger(percentComplete)
        {
            progressBar.attr('aria-valuenow', percentComplete);
            progressBar.html(percentComplete + '%');
            progressBar.attr('style', 'width: ' + percentComplete + '%;')
        }

        function hasFilesToUpload()
        {
            return (document.getElementById('fileUpload').files.length > 0);
        }
    </script>
    <!--/Files uploading Scripts-->

    <!--Restore Condition Scripts-->
    <script>
        console.log("restore");

        var userSubjectForm = $('#userSubjectForm');
        var subjectList = $("#subjectList");

        var RestoreCondition = function()
        {
            console.log(@whichSubject);
            if(@whichSubject == (0))
            {
                ShowObject(userSubjectForm);
            }
            if(@whichSubject != -1)
            {
                subjectList.get(0).selectedIndex = @whichSubject;
            }


        }();
    </script>
    <!--/Restore Condition Scripts-->

    <!--Скрипты по умолчанию для предмета-->
    @OrderScripts.GetDefaultSubjectScripts()
    <!--/Скрипты по умолчанию для предмета-->
    
}