@using Runtasker.HtmlExtensions
@using HtmlExtensions.StaticRenderers
@using Extensions.String
@using Runtasker.LocaleBuilders.Models
@using Common.JavascriptValidation.Statics
@using Runtasker.Logic.Models

@model OrderCreateModel
@{
    LocaleViewModel localeModel = ViewData["localeModel"] as LocaleViewModel;
    ViewBag.Title = localeModel["Title"];

    //получаем листы по перечислениям
    List<SelectListItem> subjects = StaticHtmlClassesHelper.GetSortedSubjectEnumList().ToList();
    List<SelectListItem> workTypes = StaticHtmlClassesHelper.GetWorkTypeEnumList().ToList();


    int count = subjects.Count - 1;
    int whichSubject = (int)Model.Subject - 1;

    whichSubject = (whichSubject == 0) ? count : whichSubject;

    

    //for datetime picker
    string langCode = StaticHtmlClassesHelper.GetLangCode();

    string jsObject = JSValidationMaker.GetJSValidationObject(typeof(OrderCreateModel));
}


    @AlertHelper.GetAlertWithActionBtn(
        localeModel["OnlineHelpAlertTitle"],
        localeModel["OnlineHelpAlertText"],
        localeModel["OnlineHelpBtnText"].WrapToA(new { href = "/Orders/OnlineHelp", @class = "btn btn-success" }))

<!-- PAGE TITLE -->
<header id="page-title">
    <div class="container">
        <h1>@ViewBag.Title</h1>
        <ul class="breadcrumb">
            <li><a href="/Home/Index">@localeModel["HomeNav"]</a></li>
            <li><a href="/Orders/Index">@localeModel["MyOrdersNav"]</a></li>
            <li class="active">@localeModel["CreateNav"]</li>
        </ul>
    </div>
</header>

<div class="page-header">
    <h1>
        @localeModel["Header"]
        <small>@localeModel["MiniHeader"]</small>
    </h1>
</div>

@using (Html.BeginForm("Create", "Orders", FormMethod.Post, htmlAttributes: new { id="myForm", enctype = "multipart/form-data" }))
{
    <div class="form-horizontal">
        @Html.ValidationErrorsToAlerts()
        @Html.AntiForgeryToken()

        
        @Html.LabelAndDropDownListFor(x => x.WorkType, workTypes, showPopover: true)
        
        @Html.LabelAndDropDownListFor(x => x.Subject, selectList: subjects, showPopover: true)
        
        @Html.LabelAndTextBoxFor(x => x.OtherSubject, showPopover: true)

        @Html.LabelAndDateTimePickerFor(x => x.FinishDate, showPopover: true)
        
        
        <!--FilesUpload-->
        <div id="@PropertyNameHelper.GetIdForForm("FileUpload")" class="form-group">
            @Html.LabelFor(model => model.FileUpload, htmlAttributes: new { @class = "control-label col-md-2 col-sm-2" })
            <div class="col-md-10 col-sm-10">
                <p>
                    <div class='input-group'>
                        @Html.TextBoxFor(model => model.FileUpload, htmlAttributes: new { id = PropertyNameHelper.GetIdForInput("FileUpload"), type = "file", multiple = "" })
                        <div class='input-group-btn'>
                            <div class="pull-right">
                                @Html.PopoverInfoFor(model => model.FileUpload, htmlAttributes: new {@class = "circle"})
                                <style>
                                    .circle {
                                        border: solid 1px #000;
                                        border-radius: 45%;
                                    }
                                </style>
                            </div>
                        </div>
                        </div>
                </p> 
                <p>@Html.GetStrongErrorText(x => x.FileUpload)</p>
            </div>
        </div>
        <!--/FilesUpload-->

        @Html.LabelAndTextAreaFor(x => x.Description)

        <div class="form-group">
            <div class="col-md-offset-2 col-md-10">
                <button onclick="CreateBtnHandler()" type="button" class="btn-lg btn btn-primary">
                    @localeModel["CreateOrder"]
                </button>
            </div>
        </div>
        <input id="realCreate" type="submit" class="hidden" />
    </div>
}

<!---->
<hr class="half-margins"/>
<!--Back to List-->
<div>
    <a href="@Url.Action("Index", "Orders")" class="btn btn-default">
        @FASigns.DoubleBack.ToHtml() @localeModel["BackToList"]
    </a>
</div>
<!--/Back to List/-->

@ModalHelper.GetLoadingModal()

@section scripts
{

    @JSValidationHelper.GetDich(jsObject)
    <script>
        EnableOnChangePropertyValidation("Subject");
        EnableOnChangePropertyValidation("Description");
        EnableOnChangePropertyValidation("OtherSubject")
    </script>
    
    <script>

        $("#@PropertyNameHelper.GetIdForInput("FinishDate")").change(function (e) {
            dateAndWorkTypeCheck()
        });

        $("#@PropertyNameHelper.GetIdForInput("WorkType")").change(function (e) {
            dateAndWorkTypeCheck()
        });

        function dateAndWorkTypeCheck()
        {
            var days = parseInt(daydiff(parseDate(document.getElementById("@PropertyNameHelper.GetIdForInput("FinishDate")").value)))
            var workType = parseInt(document.getElementById("@PropertyNameHelper.GetIdForInput("WorkType")").value);

            return CheckDaysForWorkType(days, workType)
        }


        function CheckDaysForWorkType(days, workType)
        {
            console.log("days : " + days + " workType : " + workType);


                switch (workType) {
                    case 0:
                        if (days < 3) {
                            //ShowBigError("@Runtasker.Resources.Views.Orders.Create.Create.FinishDateErrorOrdinary");
                            WriteError("WorkType", "@(new HtmlString(Runtasker.Resources.Views.Orders.Create.Create.FinishDateErrorOrdinary))");
                            WriteError("FinishDate", "@(new HtmlString(Runtasker.Resources.Views.Orders.Create.Create.FinishDateErrorOrdinary))");
                            ShowError("FinishDate");
                            ShowError("WorkType");

                            MakeFormError("WorkType");
                            MakeFormError("FinishDate");
                            return false;
                        }
                        else
                        {
                            MakeFormSuccess("WorkType");
                            MakeFormSuccess("FinishDate");
                            return true;
                        }
                        break;
                    case 1:
                        if (days < 7) {

                            WriteError("WorkType", "@(new HtmlString(Runtasker.Resources.Views.Orders.Create.Create.FinishDateErrorEssay))");
                            WriteError("FinishDate", "@(new HtmlString(Runtasker.Resources.Views.Orders.Create.Create.FinishDateErrorEssay))");
                            ShowError("FinishDate");
                            ShowError("WorkType");
                            MakeFormError("WorkType");
                            MakeFormError("FinishDate");
                            return false;
                        }
                        else
                        {
                            MakeFormSuccess("WorkType");
                            MakeFormSuccess("FinishDate");
                            return true;
                        }
                        break;
                    case 2:
                        if (days < 30)
                        {

                            WriteError("WorkType", "@(new HtmlString(Runtasker.Resources.Views.Orders.Create.Create.FinishDateErrorCourseWork))");
                            WriteError("FinishDate", "@(new HtmlString(Runtasker.Resources.Views.Orders.Create.Create.FinishDateErrorCourseWork))");
                            ShowError("FinishDate");
                            ShowError("WorkType");
                            MakeFormError("WorkType");
                            MakeFormError("FinishDate");
                            return false;
                        }
                        else
                        {
                            MakeFormSuccess("WorkType");
                            MakeFormSuccess("FinishDate");
                            return true;
                        }
                        break;
                    default:
                        alert('Я таких значений не знаю');
                }
            }
    </script>

    <!--Popover activator-->
    <script>
        var popoverBtns = $(".popoverBtn");

        var activator = function()
        {
            popoverBtns.popover();
        }();

        function HidePopovers()
        {
            popoverBtns.popover('hide');
        }

    </script>
    <!--/Tooltip activator-->

    <!--DateTimePicker-->
    @Html.GetDateTimeScriptsAndStyles()
    @ViewExtensions.GetDateTimeScriptsAndStyles(dateTimePickerId: PropertyNameHelper.GetIdForInput("FinishDate"), pickTime: false)
    <!--/DateTimePicker-->

    <script>
        var subjectList = document.getElementById("Subject" + "@PropertyNameHelper.InputAddition");
        var opts = subjectList.options.length;
        for (var i = 0; i < opts; i++) {
            if (subjectList.options[i].value.toString() == "1") {
                subjectList.options[i].selected = true;
                break;
            }
        }
    </script>

    <!--Date Scripts-->
    @ViewExtensions.GetDateParseScripts()

    <script>
        function daydiff(dateToCompare) {
            var dateNow = new Date();
            return Math.round((dateToCompare - dateNow) / (1000 * 60 * 60 * 24)) + 1;
        }
    </script>
    <!--/Date Scripts-->



    <!--SendOrderScripts-->
    <script>
        function CreateBtnHandler()
        {
            if (ValidateModel())
            {
                if (dateAndWorkTypeCheck())
                {
                    ShowHideModal();
                    document.getElementById("realCreate").click();
                }
            }
        }
    </script>
    <!--/SendOrderScripts-->


}